@inject TokenProvider _tokenProvider
@inject NavigationManager _nav



<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @Redirect();
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>



@code {
    [Parameter]
    public ApplicationInitialState InitialState { get; set; }



    protected override async Task OnInitializedAsync()
    {
        // Store the AntiForgeryToken
        _tokenProvider.AntiForgeryToken = InitialState.AntiForgeryToken;
    }



    /// <summary>
    /// If the user enters a page, that requires authorization, and is not loged in or does not have a right high enough, redirect to the homepage
    /// </summary>
    protected async Task Redirect()
    {
        _nav.NavigateTo("/");
    }
}